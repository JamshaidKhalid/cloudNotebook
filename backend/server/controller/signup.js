const Users = require('../model/Users');
const { validationResult } = require('express-validator');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const jwt_secret = 'thisismysecretforjsonwebtoken';

exports.signup = async (req, res) => {

    /**
     before creating the user instance in to be send in database,
     the following lines will check the errors produced in the 2nd argument of the post method
     if the array is not empty i.e there are erros then it will send the errors in the response
     and nothing will be send to database
     */
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(422).json({ errors: errors.array() });
    }


    /*
     Checking if the user already exists. findOne() is Mongo's method which will return true if the user exists
    */


    try {
        if (await (Users.findOne({ email: req.body.email }))) {
            return res.status(422).json({ errors: [{ msg: 'User already exists' }] });
        }

        //encrypting and hashing the password and hashed password will be stored in database
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(req.body.password, salt);

        //creating the user instance
        const user = await new Users({
            name: req.body.name,
            email: req.body.email,
            password: hashedPassword,
            date: req.body.date
        });

        //now we will not send user instance to response
        // res.send(user);

        //instead we will send a session/token/jwt token to the user
        const data = {
            id: user.id
        }

        //this token will be sent to the user and will be used to authenticate the user
        //jwt.sing() is taking userData which is in this case ID of user generated by mongoDB and a secret password
        const authToken = jwt.sign(data, jwt_secret);

        res.send({ authToken });

        user.save().catch(err => console.log(err));

    } catch (e) {
        console.log(e);
        res.status(500).send("Some error has occured");
    }
}